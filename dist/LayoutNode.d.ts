/**
* Copyright 2017-present Ampersand Technologies, Inc.
*/
import { LayoutDrawable } from './LayoutDrawable';
import { Axis, ClickFunction, LayoutBehavior, LayoutConstraints, LayoutDrawableName, LayoutNodeData, LayoutParent, Margins } from './LayoutTypes';
import * as Constants from './Constants';
import { FontDesc } from './Font';
import { AnimationDef, LayoutAnimator } from './LayoutAnimator';
import { LayoutInput } from './LayoutInput';
import { Shadow } from './LayoutTypes';
import { MomentumScroller } from './MomentumScroller';
import * as MathUtils from 'amper-utils/dist/mathUtils';
import { Dimensions, Point } from 'amper-utils/dist/mathUtils';
import { Stash } from 'amper-utils/dist/types';
export declare function applyConstraints(constraints: LayoutConstraints, dims: Dimensions): void;
export declare function parseShadow(shadowStr: string, isTextShadow: boolean): Shadow;
export declare function marginSizeForAxis(margins: Margins, axis: Axis, which: 'start' | 'end' | 'total' | 'max2'): number;
export declare class LayoutNode implements LayoutParent {
    private parent;
    private dirtyBits;
    private layout;
    private layoutBehavior;
    private positionParent;
    private virtualChildren;
    private preContentDrawables;
    private contentDrawables;
    private postContentDrawables;
    private animators;
    private unmountAnimations;
    private scroller;
    input: LayoutInput | undefined;
    private isUnmounting;
    private isAnimating;
    private isCacheable;
    private cacheDirty;
    private cacheCanvas;
    style: Stash<string>;
    private styleHash;
    private classNames;
    private classNamesHash;
    private pseudoSelectors;
    private externalConstraints;
    private intrinsicDims;
    reactFiber: any;
    dataProps: Stash;
    onClick: ClickFunction | undefined;
    onDoubleClick: ClickFunction | undefined;
    onLongPress: ClickFunction | undefined;
    constructor(layoutBehavior?: LayoutBehavior);
    destructor(): void;
    unmount(skipUnmountAnimations?: boolean): void;
    isUnmounted(): boolean;
    removeAnimationWithKey(animKey: String): void;
    removeAnimation(animator: LayoutAnimator): void;
    setLayoutBehavior(layoutBehavior?: LayoutBehavior): void;
    addChild(node: LayoutNode, beforeNode?: LayoutNode): void;
    removeChild(node: LayoutNode): void;
    removeFromParent(): void;
    addVirtualChild(child: LayoutNode): void;
    removeVirtualChild(child: LayoutNode): void;
    setPositionParent(positionParent: LayoutNode | undefined): void;
    setStyle(style: Stash<string>, classNames: string[]): this;
    private applyPseudoSelectors;
    private applyStyle;
    notifyActive: (active: boolean) => void;
    addAnimation(anim: AnimationDef): void;
    setUnmountAnimations(anims: AnimationDef[]): void;
    getDrawable(name: LayoutDrawableName): LayoutDrawable | undefined;
    hasDrawables(): boolean;
    hasInteractionHandler(): boolean;
    setCacheable(cacheable: boolean): void;
    setWidth(width: number | undefined): this;
    setHeight(height: number | undefined): this;
    setPadding(padding: Margins): this;
    setTextContent(text: string): void;
    setContent(drawables: LayoutDrawable[]): void;
    setParent(parent: LayoutParent): void;
    getParent(): LayoutParent | undefined;
    getParentNode(): LayoutNode | undefined;
    getLayoutData(): LayoutNodeData;
    getFontDesc(): FontDesc;
    getScrollHandler: () => MomentumScroller | undefined;
    private getChildBounds;
    private getDimensions;
    childIsDirty(_node: LayoutNode): void;
    setDirty(bits?: number): void;
    setInheritedChanges(inheritedChanges: Stash<number>, isStart: boolean): void;
    setExternalConstraints(newConstraints: LayoutConstraints): void;
    getIntrinsicDims(): Dimensions;
    layoutIfNeeded(force?: boolean): boolean;
    draw(ctx: CanvasRenderingContext2D): boolean;
    private drawInternal;
    layoutTreeIfNeeded(): void;
    getRootFiber(): any;
    getScreenOffset(includePadding?: boolean): MathUtils.Point;
    getDebugTree(): any;
    getChild(path: number[]): LayoutNode | undefined;
    readonly walkDownTree: (cb: (node: LayoutNode) => Constants.TreeWalkerCBResult) => any;
    getLeafTouchableNodeAt(layoutSpacePoint: Point): LayoutNode | undefined;
    readonly nodeType: number;
    getBoundingClientRect(): ClientRect;
    getClientRects(): ClientRect[];
    getComputedStyle(): Stash;
    getCanvas(): HTMLCanvasElement | undefined;
    isAnimatingLayout(): boolean;
}
export declare const debug: {
    getCounters(doReset?: boolean): {
        intrinsicDims: number;
        layout: number;
        nodeDraw: number;
    };
    resetCounters(): void;
};
